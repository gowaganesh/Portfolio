{"version":3,"file":"static/js/305.71aa30a8.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Link/linkClasses.js","../node_modules/@mui/material/Link/getTextDecoration.js","../node_modules/@mui/material/Link/Link.js","../node_modules/@mui/material/ListItemText/listItemTextClasses.js","../node_modules/@mui/material/ListItemText/ListItemText.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/devlop/lib/default.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/hast-util-parse-selector/lib/index.js","../node_modules/hastscript/lib/create-h.js","../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","../node_modules/hastscript/lib/index.js","../node_modules/vfile-location/lib/index.js","../node_modules/web-namespaces/index.js","../node_modules/hast-util-from-parse5/lib/index.js","../node_modules/zwitch/index.js","../node_modules/hast-util-to-parse5/lib/index.js","../node_modules/html-void-elements/index.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/unicode.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/error-codes.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/preprocessor.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/token.js","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-html.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-xml.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode_codepoint.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode.ts","../node_modules/hast-util-raw/node_modules/parse5/dist/common/html.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/index.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/open-element-stack.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/formatting-element-list.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tree-adapters/default.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/doctype.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/foreign-content.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/index.js","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/escape.ts","../node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js","../node_modules/hast-util-raw/lib/index.js","../node_modules/rehype-raw/lib/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import { getPath } from '@mui/system/style';\nimport { alpha } from '@mui/system/colorManipulator';\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = ownerState.color;\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { alpha } from '@mui/system/colorManipulator';\nimport elementTypeAcceptingRef from '@mui/utils/elementTypeAcceptingRef';\nimport composeClasses from '@mui/utils/composeClasses';\nimport isFocusVisible from '@mui/utils/isFocusVisible';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled, useTheme } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport linkClasses, { getLinkUtilityClass } from \"./linkClasses.js\";\nimport getTextDecoration from \"./getTextDecoration.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst v6Colors = {\n  primary: true,\n  secondary: true,\n  error: true,\n  info: true,\n  success: true,\n  warning: true,\n  textPrimary: true,\n  textSecondary: true,\n  textDisabled: true\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(memoTheme(({\n  theme\n}) => {\n  return {\n    variants: [{\n      props: {\n        underline: 'none'\n      },\n      style: {\n        textDecoration: 'none'\n      }\n    }, {\n      props: {\n        underline: 'hover'\n      },\n      style: {\n        textDecoration: 'none',\n        '&:hover': {\n          textDecoration: 'underline'\n        }\n      }\n    }, {\n      props: {\n        underline: 'always'\n      },\n      style: {\n        textDecoration: 'underline',\n        '&:hover': {\n          textDecorationColor: 'inherit'\n        }\n      }\n    }, {\n      props: ({\n        underline,\n        ownerState\n      }) => underline === 'always' && ownerState.color !== 'inherit',\n      style: {\n        textDecorationColor: 'var(--Link-underlineColor)'\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n      props: {\n        underline: 'always',\n        color\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.4)` : alpha(theme.palette[color].main, 0.4)\n      }\n    })), {\n      props: {\n        underline: 'always',\n        color: 'textPrimary'\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)\n      }\n    }, {\n      props: {\n        underline: 'always',\n        color: 'textSecondary'\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette.text.secondaryChannel} / 0.4)` : alpha(theme.palette.text.secondary, 0.4)\n      }\n    }, {\n      props: {\n        underline: 'always',\n        color: 'textDisabled'\n      },\n      style: {\n        '--Link-underlineColor': (theme.vars || theme).palette.text.disabled\n      }\n    }, {\n      props: {\n        component: 'button'\n      },\n      style: {\n        position: 'relative',\n        WebkitTapHighlightColor: 'transparent',\n        backgroundColor: 'transparent',\n        // Reset default value\n        // We disable the focus ring for mouse, touch and keyboard users.\n        outline: 0,\n        border: 0,\n        margin: 0,\n        // Remove the margin in Safari\n        borderRadius: 0,\n        padding: 0,\n        // Remove the padding in Firefox\n        cursor: 'pointer',\n        userSelect: 'none',\n        verticalAlign: 'middle',\n        MozAppearance: 'none',\n        // Reset\n        WebkitAppearance: 'none',\n        // Reset\n        '&::-moz-focus-inner': {\n          borderStyle: 'none' // Remove Firefox dotted outline.\n        },\n        [`&.${linkClasses.focusVisible}`]: {\n          outline: 'auto'\n        }\n      }\n    }]\n  };\n}));\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const theme = useTheme();\n  const {\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'always',\n    variant = 'inherit',\n    sx,\n    ...other\n  } = props;\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handleBlur = event => {\n    if (!isFocusVisible(event.target)) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    if (isFocusVisible(event.target)) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, {\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: ref,\n    ownerState: ownerState,\n    variant: variant,\n    ...other,\n    sx: [...(v6Colors[color] === undefined ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])],\n    style: {\n      ...other.style,\n      ...(underline === 'always' && color !== 'inherit' && !v6Colors[color] && {\n        '--Link-underlineColor': getTextDecoration({\n          theme,\n          ownerState\n        })\n      })\n    }\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'success', 'error', 'info', 'warning', 'textPrimary', 'textSecondary', 'textDisabled']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](https://mui.com/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListItemTextUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemText', slot);\n}\nconst listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);\nexport default listItemTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Typography, { typographyClasses } from \"../Typography/index.js\";\nimport ListContext from \"../List/ListContext.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport listItemTextClasses, { getListItemTextUtilityClass } from \"./listItemTextClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    inset,\n    primary,\n    secondary,\n    dense\n  } = ownerState;\n  const slots = {\n    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],\n    primary: ['primary'],\n    secondary: ['secondary']\n  };\n  return composeClasses(slots, getListItemTextUtilityClass, classes);\n};\nconst ListItemTextRoot = styled('div', {\n  name: 'MuiListItemText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${listItemTextClasses.primary}`]: styles.primary\n    }, {\n      [`& .${listItemTextClasses.secondary}`]: styles.secondary\n    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];\n  }\n})({\n  flex: '1 1 auto',\n  minWidth: 0,\n  marginTop: 4,\n  marginBottom: 4,\n  [`.${typographyClasses.root}:where(& .${listItemTextClasses.primary})`]: {\n    display: 'block'\n  },\n  [`.${typographyClasses.root}:where(& .${listItemTextClasses.secondary})`]: {\n    display: 'block'\n  },\n  variants: [{\n    props: ({\n      ownerState\n    }) => ownerState.primary && ownerState.secondary,\n    style: {\n      marginTop: 6,\n      marginBottom: 6\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.inset,\n    style: {\n      paddingLeft: 56\n    }\n  }]\n});\nconst ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListItemText'\n  });\n  const {\n    children,\n    className,\n    disableTypography = false,\n    inset = false,\n    primary: primaryProp,\n    primaryTypographyProps,\n    secondary: secondaryProp,\n    secondaryTypographyProps,\n    ...other\n  } = props;\n  const {\n    dense\n  } = React.useContext(ListContext);\n  let primary = primaryProp != null ? primaryProp : children;\n  let secondary = secondaryProp;\n  const ownerState = {\n    ...props,\n    disableTypography,\n    inset,\n    primary: !!primary,\n    secondary: !!secondary,\n    dense\n  };\n  const classes = useUtilityClasses(ownerState);\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/_jsx(Typography, {\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: primaryTypographyProps?.variant ? undefined : 'span',\n      ...primaryTypographyProps,\n      children: primary\n    });\n  }\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/_jsx(Typography, {\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      ...secondaryTypographyProps,\n      children: secondary\n    });\n  }\n  return /*#__PURE__*/_jsxs(ListItemTextRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other,\n    children: [primary, secondary]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Alias for the `primary` prop.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * If `true`, the children are indented.\n   * This should be used if there is no left avatar or left icon.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps: PropTypes.object,\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemText;","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isChild(properties)) {\n        children.unshift(properties)\n      } else {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @returns {value is Child}\n *   Whether `value` is definitely a child.\n */\nfunction isChild(value) {\n  // Never properties if not an object.\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return true\n  }\n\n  // Never node without `type`; that’s the main discriminator.\n  if (typeof value.type !== 'string') return false\n\n  // Slower check: never property value if object or array with\n  // non-number/strings.\n  const record = /** @type {Record<string, unknown>} */ (value)\n  const keys = Object.keys(value)\n\n  for (const key of keys) {\n    const value = record[key]\n\n    if (value && typeof value === 'object') {\n      if (!Array.isArray(value)) return true\n\n      const list = /** @type {Array<unknown>} */ (value)\n\n      for (const item of list) {\n        if (typeof item !== 'number' && typeof item !== 'string') {\n          return true\n        }\n      }\n    }\n  }\n\n  // Also see empty `children` as a node.\n  if ('children' in value && Array.isArray(value.children)) {\n    return true\n  }\n\n  // Default to properties, someone can always pass an empty object,\n  // put `data: {}` in a node,\n  // or wrap it in an array.\n  return false\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @import {VFile, Value} from 'vfile'\n * @import {Location} from 'vfile-location'\n */\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = []\n\n  return {toOffset, toPoint}\n\n  /** @type {Location['toPoint']} */\n  function toPoint(offset) {\n    if (typeof offset === 'number' && offset > -1 && offset <= value.length) {\n      let index = 0\n\n      while (true) {\n        let end = indices[index]\n\n        if (end === undefined) {\n          const eol = next(value, indices[index - 1])\n          end = eol === -1 ? value.length + 1 : eol + 1\n          indices[index] = end\n        }\n\n        if (end > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n\n        index++\n      }\n    }\n  }\n\n  /** @type {Location['toOffset']} */\n  function toOffset(point) {\n    if (\n      point &&\n      typeof point.line === 'number' &&\n      typeof point.column === 'number' &&\n      !Number.isNaN(point.line) &&\n      !Number.isNaN(point.column)\n    ) {\n      while (indices.length < point.line) {\n        const from = indices[indices.length - 1]\n        const eol = next(value, from)\n        const end = eol === -1 ? value.length + 1 : eol + 1\n        if (from === end) break\n        indices.push(end)\n      }\n\n      const offset =\n        (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1\n      // The given `column` could not exist on this line.\n      if (offset < indices[point.line - 1]) return offset\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @param {number} from\n */\nfunction next(value, from) {\n  const cr = value.indexOf('\\r', from)\n  const lf = value.indexOf('\\n', from)\n  if (lf === -1) return cr\n  if (cr === -1 || cr + 1 === lf) return lf\n  return cr < lf ? cr : lf\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @import {ElementData, Element, Nodes, RootContent, Root} from 'hast'\n * @import {DefaultTreeAdapterMap, Token} from 'parse5'\n * @import {Schema} from 'property-information'\n * @import {Point, Position} from 'unist'\n * @import {VFile} from 'vfile'\n * @import {Options} from 'hast-util-from-parse5'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean} location\n *   Whether location info was found.\n * @property {Schema} schema\n *   Current schema.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n */\n\nimport {ok as assert} from 'devlop'\nimport {h, s} from 'hastscript'\nimport {find, html, svg} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {DefaultTreeAdapterMap['node']} tree\n *   `parse5` tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const settings = options || {}\n\n  return one(\n    {\n      file: settings.file || undefined,\n      location: false,\n      schema: settings.space === 'svg' ? svg : html,\n      verbose: settings.verbose || false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} node\n *   p5 node.\n * @returns {Nodes}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Nodes} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {DefaultTreeAdapterMap['commentNode']} */ (\n        node\n      )\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference =\n        /** @type {DefaultTreeAdapterMap['document'] | DefaultTreeAdapterMap['documentFragment']} */ (\n          node\n        )\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const document = String(state.file)\n        const loc = location(document)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(document.length)\n        // Always defined as we give valid input.\n        assert(start, 'expected `start`')\n        assert(end, 'expected `end`')\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {DefaultTreeAdapterMap['documentType']} */ (\n        node\n      )\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {DefaultTreeAdapterMap['textNode']} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {DefaultTreeAdapterMap['element']} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<DefaultTreeAdapterMap['node']>} nodes\n *   Nodes.\n * @returns {Array<RootContent>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<RootContent>} */\n  const results = []\n\n  while (++index < nodes.length) {\n    // Assume no roots in `nodes`.\n    const result = /** @type {RootContent} */ (one(state, nodes[index]))\n    results.push(result)\n  }\n\n  return results\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['element']} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const properties = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      properties[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const x = state.schema.space === 'svg' ? s : h\n  const result = x(node.tagName, properties, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {DefaultTreeAdapterMap['template']} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    // Root in, root out.\n    const content = /** @type {Root} */ (one(state, reference.content))\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} from\n *   p5 node.\n * @param {Nodes} to\n *   hast node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node.\n * @param {Token.ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const properties = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            properties[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      assert(location.startTag, 'a start tag should exist')\n      const opening = position(location.startTag)\n      const closing = location.endTag ? position(location.endTag) : undefined\n      /** @type {ElementData['position']} */\n      const data = {opening}\n      if (closing) data.closing = closing\n      data.properties = properties\n\n      node.data = {position: data}\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {Token.Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n\n  // @ts-expect-error: we do use `undefined` for points if one or the other\n  // exists.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment\n * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element\n * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype\n * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment\n * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text\n * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent\n * @typedef {import('parse5').Token.Attribute} Parse5Attribute\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n *\n * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content\n *\n * @typedef {'html' | 'svg'} Space\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\nconst own = {}.hasOwnProperty\n\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to a `parse5` AST.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Parse5Nodes}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const settings = options || emptyOptions\n  const space = settings.space\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Document}\n *   Parse5 node.\n */\nfunction root(node, schema) {\n  /** @type {Parse5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Fragment}\n *   Parse5 node.\n */\nfunction fragment(node, schema) {\n  /** @type {Parse5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n *   Node (hast) to transform.\n * @returns {Parse5Doctype}\n *   Parse5 node.\n */\nfunction doctype(node) {\n  /** @type {Parse5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: null\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n *   Node (hast) to transform.\n * @returns {Parse5Text}\n *   Parse5 node.\n */\nfunction text(node) {\n  /** @type {Parse5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: null\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n *   Node (hast) to transform.\n * @returns {Parse5Comment}\n *   Parse5 node.\n */\nfunction comment(node) {\n  /** @type {Parse5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: null\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Element}\n *   Parse5 node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<Parse5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  const space = currentSchema.space\n  // `html` and `svg` both have a space.\n  assert(space)\n\n  /** @type {Parse5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: `parse5` types are wrong.\n    namespaceURI: webNamespaces[space],\n    childNodes: [],\n    parentNode: null\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Parse5Attribute | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === false ||\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {Parse5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<RootContent>} children\n *   List of children.\n * @param {Parse5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<Parse5Content>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<Parse5Content>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {Parse5Content} */\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Nodes} from\n *   hast node.\n * @param {Parse5Nodes} to\n *   `parse5` node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    assert(typeof position.start.offset === 'number')\n    assert(typeof position.end.offset === 'number')\n\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","const UNDEFINED_CODE_POINTS = new Set([\n    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,\n    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,\n    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,\n    1048575, 1114110, 1114111,\n]);\nexport const REPLACEMENT_CHARACTER = '\\uFFFD';\nexport var CODE_POINTS;\n(function (CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n})(CODE_POINTS || (CODE_POINTS = {}));\nexport const SEQUENCES = {\n    DASH_DASH: '--',\n    CDATA_START: '[CDATA[',\n    DOCTYPE: 'doctype',\n    SCRIPT: 'script',\n    PUBLIC: 'public',\n    SYSTEM: 'system',\n};\n//Surrogates\nexport function isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexport function isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexport function getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\n//NOTE: excluding NULL and ASCII whitespace\nexport function isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nexport function isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n","export var ERR;\n(function (ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR || (ERR = {}));\n","import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code, cpOffset) {\n        const { line, col, offset } = this;\n        const startCol = col + cpOffset;\n        const startOffset = offset + cpOffset;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol,\n            endCol: startCol,\n            startOffset,\n            endOffset: startOffset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code, 0));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n","export var TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType || (TokenType = {}));\nexport function getTokenAttr(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\n",null,null,null,null,"/** All valid namespaces in HTML. */\nexport var NS;\n(function (NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS || (NS = {}));\nexport var ATTRS;\n(function (ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS || (ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */\nexport var DOCUMENT_MODE;\n(function (DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE || (DOCUMENT_MODE = {}));\nexport var TAG_NAMES;\n(function (TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SEARCH\"] = \"search\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES || (TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */\nexport var TAG_ID;\n(function (TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SEARCH\"] = 94] = \"SEARCH\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 95] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 96] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 97] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 98] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 99] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 100] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 101] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 102] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 103] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 104] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 105] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 106] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 107] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 108] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 109] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 110] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 111] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 112] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 113] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 114] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 115] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 116] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 117] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 118] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 119] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 120] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 121] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 122] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 123] = \"XMP\";\n})(TAG_ID || (TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [TAG_NAMES.A, TAG_ID.A],\n    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],\n    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],\n    [TAG_NAMES.APPLET, TAG_ID.APPLET],\n    [TAG_NAMES.AREA, TAG_ID.AREA],\n    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],\n    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],\n    [TAG_NAMES.B, TAG_ID.B],\n    [TAG_NAMES.BASE, TAG_ID.BASE],\n    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],\n    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],\n    [TAG_NAMES.BIG, TAG_ID.BIG],\n    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],\n    [TAG_NAMES.BODY, TAG_ID.BODY],\n    [TAG_NAMES.BR, TAG_ID.BR],\n    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],\n    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],\n    [TAG_NAMES.CENTER, TAG_ID.CENTER],\n    [TAG_NAMES.CODE, TAG_ID.CODE],\n    [TAG_NAMES.COL, TAG_ID.COL],\n    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],\n    [TAG_NAMES.DD, TAG_ID.DD],\n    [TAG_NAMES.DESC, TAG_ID.DESC],\n    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],\n    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],\n    [TAG_NAMES.DIR, TAG_ID.DIR],\n    [TAG_NAMES.DIV, TAG_ID.DIV],\n    [TAG_NAMES.DL, TAG_ID.DL],\n    [TAG_NAMES.DT, TAG_ID.DT],\n    [TAG_NAMES.EM, TAG_ID.EM],\n    [TAG_NAMES.EMBED, TAG_ID.EMBED],\n    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],\n    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],\n    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],\n    [TAG_NAMES.FONT, TAG_ID.FONT],\n    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],\n    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],\n    [TAG_NAMES.FORM, TAG_ID.FORM],\n    [TAG_NAMES.FRAME, TAG_ID.FRAME],\n    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],\n    [TAG_NAMES.H1, TAG_ID.H1],\n    [TAG_NAMES.H2, TAG_ID.H2],\n    [TAG_NAMES.H3, TAG_ID.H3],\n    [TAG_NAMES.H4, TAG_ID.H4],\n    [TAG_NAMES.H5, TAG_ID.H5],\n    [TAG_NAMES.H6, TAG_ID.H6],\n    [TAG_NAMES.HEAD, TAG_ID.HEAD],\n    [TAG_NAMES.HEADER, TAG_ID.HEADER],\n    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],\n    [TAG_NAMES.HR, TAG_ID.HR],\n    [TAG_NAMES.HTML, TAG_ID.HTML],\n    [TAG_NAMES.I, TAG_ID.I],\n    [TAG_NAMES.IMG, TAG_ID.IMG],\n    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],\n    [TAG_NAMES.INPUT, TAG_ID.INPUT],\n    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],\n    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],\n    [TAG_NAMES.LABEL, TAG_ID.LABEL],\n    [TAG_NAMES.LI, TAG_ID.LI],\n    [TAG_NAMES.LINK, TAG_ID.LINK],\n    [TAG_NAMES.LISTING, TAG_ID.LISTING],\n    [TAG_NAMES.MAIN, TAG_ID.MAIN],\n    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],\n    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],\n    [TAG_NAMES.MATH, TAG_ID.MATH],\n    [TAG_NAMES.MENU, TAG_ID.MENU],\n    [TAG_NAMES.META, TAG_ID.META],\n    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],\n    [TAG_NAMES.MI, TAG_ID.MI],\n    [TAG_NAMES.MO, TAG_ID.MO],\n    [TAG_NAMES.MN, TAG_ID.MN],\n    [TAG_NAMES.MS, TAG_ID.MS],\n    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],\n    [TAG_NAMES.NAV, TAG_ID.NAV],\n    [TAG_NAMES.NOBR, TAG_ID.NOBR],\n    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],\n    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],\n    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],\n    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],\n    [TAG_NAMES.OL, TAG_ID.OL],\n    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],\n    [TAG_NAMES.OPTION, TAG_ID.OPTION],\n    [TAG_NAMES.P, TAG_ID.P],\n    [TAG_NAMES.PARAM, TAG_ID.PARAM],\n    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],\n    [TAG_NAMES.PRE, TAG_ID.PRE],\n    [TAG_NAMES.RB, TAG_ID.RB],\n    [TAG_NAMES.RP, TAG_ID.RP],\n    [TAG_NAMES.RT, TAG_ID.RT],\n    [TAG_NAMES.RTC, TAG_ID.RTC],\n    [TAG_NAMES.RUBY, TAG_ID.RUBY],\n    [TAG_NAMES.S, TAG_ID.S],\n    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],\n    [TAG_NAMES.SEARCH, TAG_ID.SEARCH],\n    [TAG_NAMES.SECTION, TAG_ID.SECTION],\n    [TAG_NAMES.SELECT, TAG_ID.SELECT],\n    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],\n    [TAG_NAMES.SMALL, TAG_ID.SMALL],\n    [TAG_NAMES.SPAN, TAG_ID.SPAN],\n    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],\n    [TAG_NAMES.STRONG, TAG_ID.STRONG],\n    [TAG_NAMES.STYLE, TAG_ID.STYLE],\n    [TAG_NAMES.SUB, TAG_ID.SUB],\n    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],\n    [TAG_NAMES.SUP, TAG_ID.SUP],\n    [TAG_NAMES.TABLE, TAG_ID.TABLE],\n    [TAG_NAMES.TBODY, TAG_ID.TBODY],\n    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],\n    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],\n    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],\n    [TAG_NAMES.TD, TAG_ID.TD],\n    [TAG_NAMES.TH, TAG_ID.TH],\n    [TAG_NAMES.THEAD, TAG_ID.THEAD],\n    [TAG_NAMES.TITLE, TAG_ID.TITLE],\n    [TAG_NAMES.TR, TAG_ID.TR],\n    [TAG_NAMES.TRACK, TAG_ID.TRACK],\n    [TAG_NAMES.TT, TAG_ID.TT],\n    [TAG_NAMES.U, TAG_ID.U],\n    [TAG_NAMES.UL, TAG_ID.UL],\n    [TAG_NAMES.SVG, TAG_ID.SVG],\n    [TAG_NAMES.VAR, TAG_ID.VAR],\n    [TAG_NAMES.WBR, TAG_ID.WBR],\n    [TAG_NAMES.XMP, TAG_ID.XMP],\n]);\nexport function getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nexport const SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP,\n    ]),\n    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),\n    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set(),\n};\nexport const NUMBERED_HEADERS = new Set([$.H1, $.H2, $.H3, $.H4, $.H5, $.H6]);\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT,\n]);\nexport function hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);\n}\n","import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n","import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENTS_HTML = new Set([\n    $.APPLET,\n    $.CAPTION,\n    $.HTML,\n    $.MARQUEE,\n    $.OBJECT,\n    $.TABLE,\n    $.TD,\n    $.TEMPLATE,\n    $.TH,\n]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInDynamicScope(tagName, htmlScope) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (tn === tagName)\n                        return true;\n                    if (htmlScope.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n    }\n    hasInListItemScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n    }\n    hasInButtonScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (NUMBERED_HEADERS.has(tn))\n                        return true;\n                    if (SCOPING_ELEMENTS_HTML.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.OPTION:\n                case $.OPTGROUP: {\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n","//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n","import { DOCUMENT_MODE } from '../common/html.js';\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    createTextNode(value) {\n        return {\n            nodeName: '#text',\n            value,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, defaultTreeAdapter.createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, defaultTreeAdapter.createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n","import { DOCUMENT_MODE } from './html.js';\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//',\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    '-//w3o//dtd w3 html strict 3.0//en//',\n    '-/w3c/dtd html 4.0 transitional/en',\n    'html',\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix) => publicId.startsWith(prefix));\n}\n//API\nexport function isConforming(token) {\n    return (token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));\n}\nexport function getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return DOCUMENT_MODE.NO_QUIRKS;\n}\n","import { TAG_ID as $, NS, ATTRS, getTagID } from './html.js';\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml',\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    'attributeName',\n    'attributeType',\n    'baseFrequency',\n    'baseProfile',\n    'calcMode',\n    'clipPathUnits',\n    'diffuseConstant',\n    'edgeMode',\n    'filterUnits',\n    'glyphRef',\n    'gradientTransform',\n    'gradientUnits',\n    'kernelMatrix',\n    'kernelUnitLength',\n    'keyPoints',\n    'keySplines',\n    'keyTimes',\n    'lengthAdjust',\n    'limitingConeAngle',\n    'markerHeight',\n    'markerUnits',\n    'markerWidth',\n    'maskContentUnits',\n    'maskUnits',\n    'numOctaves',\n    'pathLength',\n    'patternContentUnits',\n    'patternTransform',\n    'patternUnits',\n    'pointsAtX',\n    'pointsAtY',\n    'pointsAtZ',\n    'preserveAlpha',\n    'preserveAspectRatio',\n    'primitiveUnits',\n    'refX',\n    'refY',\n    'repeatCount',\n    'repeatDur',\n    'requiredExtensions',\n    'requiredFeatures',\n    'specularConstant',\n    'specularExponent',\n    'spreadMethod',\n    'startOffset',\n    'stdDeviation',\n    'stitchTiles',\n    'surfaceScale',\n    'systemLanguage',\n    'tableValues',\n    'targetX',\n    'targetY',\n    'textLength',\n    'viewBox',\n    'viewTarget',\n    'xChannelSelector',\n    'yChannelSelector',\n    'zoomAndPan',\n].map((attr) => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],\n    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],\n    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],\n    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],\n    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],\n    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],\n    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],\n    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],\n    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],\n    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],\n    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],\n]);\n//SVG tag names adjustment map\nexport const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    'altGlyph',\n    'altGlyphDef',\n    'altGlyphItem',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'clipPath',\n    'feBlend',\n    'feColorMatrix',\n    'feComponentTransfer',\n    'feComposite',\n    'feConvolveMatrix',\n    'feDiffuseLighting',\n    'feDisplacementMap',\n    'feDistantLight',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feImage',\n    'feMerge',\n    'feMergeNode',\n    'feMorphology',\n    'feOffset',\n    'fePointLight',\n    'feSpecularLighting',\n    'feSpotLight',\n    'feTile',\n    'feTurbulence',\n    'foreignObject',\n    'glyphRef',\n    'linearGradient',\n    'radialGradient',\n    'textPath',\n].map((tn) => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    $.B,\n    $.BIG,\n    $.BLOCKQUOTE,\n    $.BODY,\n    $.BR,\n    $.CENTER,\n    $.CODE,\n    $.DD,\n    $.DIV,\n    $.DL,\n    $.DT,\n    $.EM,\n    $.EMBED,\n    $.H1,\n    $.H2,\n    $.H3,\n    $.H4,\n    $.H5,\n    $.H6,\n    $.HEAD,\n    $.HR,\n    $.I,\n    $.IMG,\n    $.LI,\n    $.LISTING,\n    $.MENU,\n    $.META,\n    $.NOBR,\n    $.OL,\n    $.P,\n    $.PRE,\n    $.RUBY,\n    $.S,\n    $.SMALL,\n    $.SPAN,\n    $.STRONG,\n    $.STRIKE,\n    $.SUB,\n    $.SUP,\n    $.TABLE,\n    $.TT,\n    $.U,\n    $.UL,\n    $.VAR,\n]);\n//Check exit from foreign content\nexport function causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === $.FONT &&\n        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\n//Token adjustments\nexport function adjustTokenMathMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexport function adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexport function adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexport function adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n    }\n}\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\nexport function isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||\n        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));\n}\n","import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, \n    /** @internal */\n    fragmentContext = null, \n    /** @internal */\n    scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        /** @internal */\n        this.insertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.headElement = null;\n        /** @internal */\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         *\n         * @internal\n         */\n        this.tmplInsertionModeStack = [];\n        /** @internal */\n        this.pendingCharacterTokens = [];\n        /** @internal */\n        this.hasNonWhitespacePendingCharacterToken = false;\n        /** @internal */\n        this.framesetOk = true;\n        /** @internal */\n        this.skipNextNewLine = false;\n        /** @internal */\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    /** @internal */\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    /** @internal */\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    /** @internal */\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    /** @protected */\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    /** @protected */\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    /** @protected */\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    /** @protected */\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    /** @protected */\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    /**\n     * For self-closing tags. Add an element to the tree, but skip adding it\n     * to the stack.\n     */\n    /** @protected */\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    /** @protected */\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    /** @protected */\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    /** @protected */\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    /** @protected */\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    /** @protected */\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    /** @protected */\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    /** @protected */\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    /** @protected */\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    /** @protected */\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    /** @protected */\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    /** @protected */\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    /** @protected */\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    /** @protected */\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    /** @protected */\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    /** @protected */\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    /** @protected */\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    /** @protected */\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    /** @protected */\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    /** @protected */\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    /** @protected */\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    /** @internal */\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     * @protected\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED:\n        case $.NOFRAMES: {\n            rawTextStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                rawTextStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.HR: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n",null,"import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n","/**\n * @import {Options} from 'hast-util-raw'\n * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'\n * @import {Point} from 'unist'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */\n\n/**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that we’ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {toParse5} from 'hast-util-to-parse5'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {Parser, Token, TokenizerMode, html} from 'parse5'\nimport {pointEnd, pointStart} from 'unist-util-position'\nimport {visit} from 'unist-util-visit'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nconst gfmTagfilterExpression =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions<DefaultTreeAdapterMap>} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nexport function raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = zwitch('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new Parser(parseOptions)\n      : Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, pointStart())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = fromParse5(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    visit(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  // Allow `DATA` through `PLAINTEXT`,\n  // but when hanging in a tag for example,\n  // switch back to `DATA`.\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  if (state.parser.tokenizer.state > 4) {\n    state.parser.tokenizer.state = 0\n  }\n\n  /** @type {Token.CharacterToken} */\n  const token = {\n    type: Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {Token.DoctypeToken} */\n  const token = {\n    type: Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {Token.CommentToken} */\n  const token = {\n    type: Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, pointStart(node))\n\n  state.parser.tokenizer.write(\n    state.options.tagfilter\n      ? node.value.replace(gfmTagfilterExpression, '&lt;$1$2')\n      : node.value,\n    false\n  )\n  // @ts-expect-error: private.\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  // To do: remove next major.\n  /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    // @ts-expect-error: removed.\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if they’re still there after hibernating.\n  /** @type {Token.CharacterToken} */\n  // @ts-expect-error: private.\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.inLoop = false\n\n  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.returnState = TokenizerMode.DATA\n  // @ts-expect-error: private.\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Token.Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointStart(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html\n\n  if (ns === webNamespaces.html && tagName === 'svg') {\n    ns = webNamespaces.svg\n  }\n\n  const result = toParse5(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === webNamespaces.svg ? 'svg' : 'html'}\n  )\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.START_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    // Always element.\n    /* c8 ignore next */\n    attrs: 'attrs' in result ? result.attrs : [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    htmlVoidElements.includes(tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointEnd(node))\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.END_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that don’t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)\n    // Note: `<plaintext>` not needed, as it’s the last element.\n  ) {\n    state.parser.tokenizer.state = TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName.toLowerCase() === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Token.Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = pointStart(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = pointEnd(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Token.Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types don’t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? structuredClone({...node, children: []})\n    : structuredClone(node)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} RawOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<RawOptions, 'file'>} Options\n *   Configuration.\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Parse the tree (and raw nodes) again, keeping positional info okay.\n *\n * @param {Options | null | undefined}  [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeRaw(options) {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    // Assume root in -> root out.\n    const result = /** @type {Root} */ (raw(tree, {...options, file}))\n    return result\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["getLinkUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_ref","theme","ownerState","transformedColor","color","getPath","channelColor","alpha","v6Colors","primary","secondary","error","info","success","warning","textPrimary","textSecondary","textDisabled","LinkRoot","styled","Typography","name","overridesResolver","props","styles","root","capitalize","underline","component","button","memoTheme","variants","style","textDecoration","textDecorationColor","_ref2","Object","entries","palette","filter","createSimplePaletteValueFilter","map","_ref3","vars","mainChannel","main","text","primaryChannel","secondaryChannel","disabled","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","linkClasses","focusVisible","React","inProps","ref","useDefaultProps","useTheme","className","onBlur","onFocus","TypographyClasses","variant","sx","other","setFocusVisible","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","event","isFocusVisible","target","undefined","Array","isArray","getTextDecoration","getListItemTextUtilityClass","ListItemTextRoot","listItemTextClasses","inset","multiline","dense","flex","minWidth","marginTop","marginBottom","typographyClasses","display","paddingLeft","children","disableTypography","primaryProp","primaryTypographyProps","secondaryProp","secondaryTypographyProps","ListContext","type","_jsxs","hasOwn","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","options","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","node","Position","whitespace","this","end","source","content","errorsList","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","__importDefault","require","env","self","globalThis","deserialize","serialized","deserializer","$","_","as","out","index","set","unpair","has","get","object","Date","flags","RegExp","Map","Set","add","message","BigInt","EMPTY","keys","typeOf","asString","includes","shouldSkip","TYPE","serialize","json","lossy","serializer","strict","pair","entry","valueOf","toJSON","toISOString","structuredClone","any","parse","tokens","input","String","indexOf","token","stringify","values","settings","join","padRight","padLeft","ok","unreachable","emptyOptions","one","includeImageAlt","includeHtml","Boolean","alt","all","result","blankLine","tokenize","effects","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","Schema","normal","space","merge","definitions","assign","own","create","definition","properties","DefinedInfo","transform","attributes","mustUseProperty","normalize","attribute","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","compact","declare","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cx","cy","d","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","dashes","kebab","$0","checks","types","super","mark","check","defined","powers","increment","nameRe","nameReJsx","jsx","empty","hastToReact","StyleToObject","stringifyPosition","point","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","ruleId","parent","fatal","file","stack","actual","expected","note","url","emptyMap","dashSomething","tableElements","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","isStaticChildren","pointStart","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","count","isNaN","commas","spaces","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","$1","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","document","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","destination","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","allowDangerousHtml","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","remarkRehype","deprecation","mdastTree","hastTree","visit","colon","questionMark","numberSign","createH","defaultTagName","caseSensitive","createAdjustMap","selector","subvalue","parseSelector","record","isChild","addProperty","addChild","parsePrimitive","finalResult","nodes","h","s","cr","lf","webNamespaces","mathml","fromParse5","location","verbose","nodeName","patch","quirksMode","childNodes","loc","indices","toOffset","eol","toPoint","namespaceURI","attrs","sourceCodeLocation","startTag","endTag","createLocation","opening","closing","startLine","startCol","endLine","endCol","endOffset","zwitch","invalid","handlers","unknown","currentSchema","parentNode","doctype","publicId","systemId","htmlVoidElements","UNDEFINED_CODE_POINTS","REPLACEMENT_CHARACTER","CODE_POINTS","SEQUENCES","isSurrogate","cp","isControlCodePoint","isUndefinedCodePoint","ERR","Preprocessor","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","lastErrOffset","col","getError","cpOffset","_err","onParseError","_addGap","_processSurrogate","nextCp","isSurrogatePair","EOF","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","substring","isLastChunk","insertHtmlAtCurrentPos","startsWith","peek","CARRIAGE_RETURN","LINE_FEED","advance","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","retreat","TokenType","getTokenAttr","attrName","Uint16Array","decodeMap","_a","codePoint","replaceCodePoint","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isEntityInAttributeInvalidEnd","EQUALS","UPPER_A","UPPER_Z","LOWER_A","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","decodeTree","emitCodePoint","errors","EntityStart","treeIndex","excess","decodeMode","Strict","startEntity","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","digitCount","pow","substr","startIdx","UPPER_F","LOWER_F","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","decoder","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecodeTree","xmlDecodeTree","NS","ATTRS","DOCUMENT_MODE","TAG_NAMES","TAG_ID","TAG_NAME_TO_ID","A","ADDRESS","ANNOTATION_XML","APPLET","AREA","ARTICLE","ASIDE","B","BASE","BASEFONT","BGSOUND","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CAPTION","CENTER","CODE","COL","COLGROUP","DD","DESC","DETAILS","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FOREIGN_OBJECT","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IMG","IMAGE","INPUT","IFRAME","KEYGEN","LABEL","LI","LINK","LISTING","MAIN","MALIGNMARK","MARQUEE","MATH","MENU","META","MGLYPH","MI","MO","MN","MS","MTEXT","NAV","NOBR","NOFRAMES","NOEMBED","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","P","PARAM","PLAINTEXT","PRE","RB","RP","RT","RTC","RUBY","S","SCRIPT","SEARCH","SECTION","SELECT","SOURCE","SMALL","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","TABLE","TBODY","TEMPLATE","TEXTAREA","TFOOT","TD","TH","THEAD","TITLE","TR","TRACK","TT","U","UL","SVG","VAR","WBR","XMP","getTagID","UNKNOWN","SPECIAL_ELEMENTS","MATHML","XLINK","XML","XMLNS","NUMBERED_HEADERS","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","CDATA_SECTION","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLetter","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLower","DIGIT_0","DIGIT_9","isAsciiDigit","toAsciiLower","isWhitespace","SPACE","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","paused","inLoop","inForeignNode","lastStartTagName","active","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","preprocessor","currentLocation","getCurrentLocation","entityDecoder","_flushCodePointConsumedAsCharacterReference","NULL","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","controlCharacterReference","getErrorForNumericCharacterReference","_b","sourceCodeLocationInfo","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","writeCallback","_advanceBy","_consumeSequenceIfMatch","_createStartTagToken","START_TAG","tagID","selfClosing","ackSelfClosing","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","_isCharacterReferenceInAttribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","$$","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","SEMICOLON","unknownNamedCharacterReference","IMPLICIT_END_TAG_REQUIRED","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","SCOPING_ELEMENTS_HTML","SCOPING_ELEMENTS_HTML_LIST","SCOPING_ELEMENTS_HTML_BUTTON","SCOPING_ELEMENTS_MATHML","SCOPING_ELEMENTS_SVG","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","currentTmplContentOrNode","_isInTemplate","treeAdapter","getTemplateContent","tagIDs","stackTop","tmplCount","currentTagId","_indexOf","getNamespaceURI","_updateCurrentElement","onItemPush","popped","onItemPop","oldElement","newElement","idx","insertAfter","referenceElement","newElementID","insertionIdx","popUntilTagNamePopped","targetIdx","shortenToLength","popUntilElementPopped","popUntilPopped","tagNames","targetNS","_indexOfTagNames","popUntilNumberedHeaderPopped","popUntilTableCellPopped","popAllUpToHtmlElement","clearBackTo","clearBackToTableContext","clearBackToTableBodyContext","clearBackToTableRowContext","tryPeekProperlyNestedBodyElement","contains","getCommonAncestor","elementIdx","isRootHtmlElementCurrent","hasInDynamicScope","htmlScope","tn","hasInScope","hasInListItemScope","hasInButtonScope","hasNumberedHeaderInScope","hasInTableScope","hasTableBodyContextInTableScope","hasInSelectScope","generateImpliedEndTags","generateImpliedEndTagsThoroughly","generateImpliedEndTagsWithExclusion","exclusionId","EntryType","MARKER","Marker","FormattingElementList","bookmark","_getNoahArkConditionCandidates","neAttrs","candidates","neAttrsLength","neTagName","getTagName","neNamespaceURI","elementAttrs","getAttrList","_ensureNoahArkCondition","neAttrsMap","neAttr","validCandidates","candidate","every","cAttr","insertMarker","pushElement","Element","insertElementAfterBookmark","bookmarkIdx","removeEntry","clearToLastMarker","markerIdx","getElementEntryInScopeWithTagName","getElementEntry","defaultTreeAdapter","createDocument","NO_QUIRKS","createDocumentFragment","createCommentNode","createTextNode","appendChild","newNode","insertBefore","referenceNode","setTemplateContent","templateElement","contentElement","setDocumentType","doctypeNode","setDocumentMode","getDocumentMode","detachNode","insertText","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","attr","j","getFirstChild","getChildNodes","getParentNode","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","VALID_DOCTYPE_NAME","QUIRKS_MODE_PUBLIC_ID_PREFIXES","QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES","QUIRKS_MODE_PUBLIC_IDS","LIMITED_QUIRKS_PUBLIC_ID_PREFIXES","LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES","hasPrefix","prefixes","some","MIME_TYPES","SVG_ATTRS_ADJUSTMENT_MAP","XML_ATTRS_ADJUSTMENT_MAP","SVG_TAG_NAMES_ADJUSTMENT_MAP","EXITS_FOREIGN_CONTENT","adjustTokenMathMLAttrs","adjustTokenSVGAttrs","adjustedAttrName","adjustTokenXMLAttrs","adjustedAttrEntry","isIntegrationPoint","ns","foreignNS","ENCODING","isHtmlIntegrationPoint","isMathMLTextIntegrationPoint","InsertionMode","BASE_LOC","TABLE_STRUCTURE_TAGS","defaultParserOptions","scriptingEnabled","fragmentContext","scriptHandler","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","fosterParentingEnabled","activeFormattingElements","fragmentContextID","_setContextModes","openElements","getFragmentParser","opts","TN","documentMock","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","_adoptNodes","beforeToken","tid","isTop","_setEndLocation","isHTML","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","TEXT","switchToPlaintextParsing","IN_BODY","_getAdjustedCurrentElement","_setDocumentType","docTypeNode","_attachElementToTree","_shouldFosterParentOnInsertion","_fosterParentElement","_appendElement","_insertFakeElement","_insertTemplate","tmpl","_appendCommentNode","_insertCharacters","beforeElement","_findFosterParentingLocation","textNodeIdx","donor","closingToken","ctLoc","endLoc","shouldProcessStartTagTokenInForeignContent","_processToken","_processStartTag","foreignContent","_reconstructActiveFormattingElements","listLength","findIndex","_closeTableCell","IN_ROW","_closePElement","IN_TABLE_BODY","IN_CAPTION","IN_COLUMN_GROUP","IN_TABLE","IN_FRAMESET","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","IN_CELL","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","openElement","_isSpecialElement","p","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","QUIRKS","LIMITED_QUIRKS","nonConformingDoctype","doctypeInInitialMode","misplacedDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagToken","COLOR","SIZE","FACE","popUntilHtmlOrIntegrationPoint","_startTagOutsideForeignContent","currentNs","adjustedTagName","startTagInForeignContent","startTagBeforeHtml","startTagInBody","startTagBeforeHead","startTagInHead","nestedNoscriptInHead","startTagInHeadNoScript","abandonedHeadElementChild","misplacedStartTagForHeadElement","startTagAfterHead","startTagInTable","TABLE_VOID_ELEMENTS","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","_endTagOutsideForeignContent","endTagInForeignContent","endTagBeforeHtml","endTagWithoutMatchingOpenElement","endTagBeforeHead","templateEndTagInHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInElementThatCanContainOnlyText","eofInText","eofInTemplate","stopParsing","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","formattingElementEntry","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","aaInnerLoop","formattingElement","lastElement","nextElement","elementEntry","counterOverflow","aaRecreateElementFromEntry","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","callAdoptionAgency","htmlElement","htmlLocation","bodyElement","bodyLocation","missingDoctype","closingOfElementWithOpenChildElements","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","modeInBody","areaStartTagInBody","isHiddenInput","inputType","rawTextStartTagInBody","genericStartTagInBody","bStartTagInBody","activeElementEntry","aStartTagInBody","numberedHeaderStartTagInBody","addressStartTagInBody","elementId","listItemStartTagInBody","hrStartTagInBody","rbStartTagInBody","rtStartTagInBody","preStartTagInBody","xmpStartTagInBody","svgStartTagInBody","htmlStartTagInBody","bodyStartTagInBody","inTemplate","formStartTagInBody","nobrStartTagInBody","mathStartTagInBody","tableStartTagInBody","inputStartTagInBody","paramStartTagInBody","imageStartTagInBody","buttonStartTagInBody","appletStartTagInBody","iframeStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","framesetStartTagInBody","textareaStartTagInBody","plaintextStartTagInBody","pEndTagInBody","addressEndTagInBody","liEndTagInBody","ddEndTagInBody","numberedHeaderEndTagInBody","brEndTagInBody","bodyEndTagInBody","htmlEndTagInBody","formEndTagInBody","appletEndTagInBody","tokenInTable","tdStartTagInTable","colStartTagInTable","formStartTagInTable","tableStartTagInTable","tbodyStartTagInTable","inputStartTagInTable","captionStartTagInTable","colgroupStartTagInTable","savedFosterParentingState","xmlCodeMap","getEscaper","lastIdx","gfmTagfilterExpression","knownMdxNames","parseOptions","documentMode","handleRaw","handle","stitches","resetTokenizer","stitch","toParse5","tag","Token","createParse5Location","pointEnd","cloneWithoutChildren","fakeRoot","setPoint","tagfilter","node_","passThrough","extra","charRefCode","rehypeRaw","ccount","character","findAndReplace","ignored","convert","ignore","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","tracker","createTracker","move","subexit","safe","associationId","footnoteDefinition","indentLines","containerFlow","blank","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","suffix","imageReference","inlineCode","compilePattern","formatLinkAsAutolink","resourceLink","linkReference","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","blockquote","break","fence","checkFence","fences","formatCodeAsIndented","repeat","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","defaultHandlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","cell","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","delete","gfmToMarkdown","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","contents","listItemLoose","trimLines","last","trimLine","applyData","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","definitionById","loose","listLoose","firstRow","tableContent","cellIndex","cells","toml","yaml","hName","hChildren","hProperties","defaultUnknownHandler","trimMarkdownSpaceStart","toHast","footnoteById","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}