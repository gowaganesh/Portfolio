{"version":3,"file":"static/js/114.21eae1d0.chunk.js","mappings":"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","sources":["components/about/workExperience.tsx","components/common/markdownRenderer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Box, List, ListItem, ListItemText, Stack, Typography } from \"@mui/material\";\r\nimport MarkdownRenderer from \"../common/markdownRenderer\";\r\nimport workExp from \"../../lib/data/workExperience.md\"\r\ninterface Experience {\r\n  role: string;\r\n  company: string;\r\n  duration: string;\r\n  responsibilities: string[];\r\n}\r\n\r\n// const experiences: Experience[] = [\r\n//   {\r\n//     role: \"Data Engineer (Application Development Analyst)\",\r\n//     company: \"Accenture, Coimbatore\",\r\n//     duration: \"Mar 2023 - Present\",\r\n//     responsibilities: [\r\n//       \"&#x22C6; Developed and maintained data integration solutions to consolidate <mark>structured and semi-structured data</mark> from sources (<mark>REST API, Complex JSON, Databases, and Delimited files</mark>) into unified format for analysis by incorporating data quality checks.\",\r\n//       \"&#x22C6; Designed and implemented multiple data pipelines in <mark>NiFi</mark> for <mark>history, monthly and daily data loading</mark>, by managing <mark>SCD</mark> types.\",\r\n//       \"&#x22C6; <mark>Independent E2E project experience</mark> with timely deliverables in data mapping, extracting, cleansing, validation, transformation pipelines, ingestion, unit testing, document preparation till production deployment, by <mark>imposing automation</mark> in all possible areas.\",\r\n//       \"&#x22C6; Automated creation of Impala DDL create statements for <mark>90+</mark> tables (<mark>2000+</mark> fields) into SQL file by <mark>reducing 100% manual effort</mark>.\",\r\n//       \"&#x22C6; Gathered requirements from vendor, provided updates on project progress and addressed any issues.\",\r\n//       \"&#x22C6; Structured working methods and ability to work independently with personal responsibility and a proactive approach.\",\r\n//     ],\r\n//   },\r\n//   {\r\n//     role: \"Data Engineer (Application Development Analyst)\",\r\n//     company: \"Accenture, Coimbatore\",\r\n//     duration: \"Jun 2021 - Feb 2023\",\r\n//     responsibilities: [\r\n//       \"&#x22C6; Designed and implemented multiple data pipelines in <mark>NiFi</mark> for <mark>history, monthly and daily data loading</mark>, by managing SCD types.\",\r\n//     ],\r\n//   },\r\n// ];\r\n\r\nconst WorkExperienceEntry: React.FC<Experience> = ({\r\n  role,\r\n  company,\r\n  duration,\r\n  responsibilities,\r\n}) => (\r\n  <Box sx={{ width: \"100%\", mb: 4 }}>\r\n    {/* <Stack direction=\"column\" alignItems=\"start\" justifyContent=\"space-between\">\r\n      <Typography variant=\"body1\" fontWeight={600}>\r\n        {role} - {company}\r\n      </Typography>\r\n      <Typography variant=\"caption\">({duration})</Typography>\r\n    </Stack>\r\n    <List >\r\n      {responsibilities.map((item, index) => (\r\n        <ListItem key={index} disablePadding>\r\n          <ListItemText\r\n            primary={\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: item,\r\n                }}\r\n              />\r\n            }\r\n          />\r\n        </ListItem>\r\n      ))}\r\n    </List> */}\r\n  </Box>\r\n);\r\n\r\n// Main WorkExperience component\r\nconst WorkExperience: React.FC = () => (\r\n  <Box  sx={{ width: \"100%\" }}>\r\n    <MarkdownRenderer contentUrl={workExp} storageKey=\"workExperience\"/>\r\n    {/* {experiences.map((experience, index) => (\r\n      <WorkExperienceEntry key={index} {...experience} />\r\n    ))} */}\r\n  </Box>\r\n);\r\n\r\nexport default WorkExperience;\r\n","import React, { useState, useEffect, ReactNode } from \"react\";\r\nimport { Typography, List, ListItem, ListItemText, Link } from \"@mui/material\";\r\nimport Markdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport remarkRehype from \"remark-rehype\";\r\nimport rehypeRaw from \"rehype-raw\";\r\n\r\ninterface MarkdownRendererProps {\r\n    contentUrl: string; \r\n    storageKey: string; \r\n}\r\n\r\nconst MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ contentUrl, storageKey }) => {\r\n    const [content, setContent] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        const storedContent = sessionStorage.getItem(storageKey);\r\n\r\n        // if (storedContent) {\r\n        //     setContent(storedContent);\r\n        // } else {\r\n            fetch(contentUrl)\r\n                .then((response) => response.text())\r\n                .then((text) => {\r\n                    setContent(text);\r\n                    sessionStorage.setItem(storageKey, text);\r\n                })\r\n                .catch(() => setContent(\"Failed to load content. Please reload the page!\"));\r\n        // }\r\n    }, [contentUrl, storageKey]);\r\n\r\n    return (\r\n        <Markdown\r\n            remarkPlugins={[remarkGfm]}\r\n            rehypePlugins={[remarkRehype, rehypeRaw]}\r\n            components={{\r\n                h1: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h1\">{children}</Typography>\r\n                ),\r\n                h2: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h2\">{children}</Typography>\r\n                ),\r\n                h3: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h3\">{children}</Typography>\r\n                ),\r\n                h4: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h4\">{children}</Typography>\r\n                ),\r\n                h5: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h5\">{children}</Typography>\r\n                ),\r\n                h6: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"h6\">{children}</Typography>\r\n                ),\r\n                ul: ({ children }: { children?: ReactNode }) => (\r\n                    <List\r\n                        sx={{ pt: 0 }}\r\n                        style={{ listStyleType: \"disc\", paddingLeft: \"20px\" }}\r\n                    >\r\n                        {children}\r\n                    </List>\r\n                ),\r\n                ol: ({ children }: { children?: ReactNode }) => (\r\n                    <List\r\n                        sx={{ pt: 0 }}\r\n                        style={{ listStyleType: \"decimal\", paddingLeft: \"20px\" }}\r\n                    >\r\n                        {children}\r\n                    </List>\r\n                ),\r\n                li: ({ children }: { children?: ReactNode }) => (\r\n                    <ListItem\r\n                        style={{ display: \"list-item\", paddingLeft: 0 }}\r\n                        sx={{ pt: 0, pb: 1 }}\r\n                        disableGutters\r\n                    >\r\n                        <ListItemText sx={{ pt: 0 }}>{children}</ListItemText>\r\n                    </ListItem>\r\n                ),\r\n                a: ({ href, children }: { href?: string; children?: ReactNode }) => (\r\n                    <Link href={href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {children}\r\n                    </Link>\r\n                ),\r\n                p: ({ children }: { children?: ReactNode }) => (\r\n                    <Typography variant=\"body1\">{children}</Typography>\r\n                ),\r\n            }}\r\n        >\r\n            {content}\r\n        </Markdown>\r\n    );\r\n};\r\n\r\nexport default React.memo(MarkdownRenderer);\r\n"],"names":["WorkExperience","_jsx","Box","sx","width","children","MarkdownRenderer","contentUrl","workExp","storageKey","_ref","content","setContent","useState","useEffect","sessionStorage","getItem","fetch","then","response","text","setItem","catch","Markdown","remarkPlugins","remarkGfm","rehypePlugins","remarkRehype","rehypeRaw","components","h1","_ref2","Typography","variant","h2","_ref3","h3","_ref4","h4","_ref5","h5","_ref6","h6","_ref7","ul","_ref8","List","pt","style","listStyleType","paddingLeft","ol","_ref9","li","_ref10","ListItem","display","pb","disableGutters","ListItemText","a","_ref11","href","Link","target","rel","p","_ref12","React"],"sourceRoot":""}